import { GoogleGenerativeAI } from "@google/generative-ai";

// Verificar se a API key est√° configurada
if (!process.env.GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è GEMINI_API_KEY n√£o configurada! As descri√ß√µes autom√°ticas n√£o funcionar√£o.");
}

const genAI = process.env.GEMINI_API_KEY 
  ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
  : null;

const model = genAI?.getGenerativeModel({ 
  model: "gemini-2.5-pro-preview-03-25",
  generationConfig: {
    temperature: 0.7,
    topK: 40,
    topP: 0.95,
    maxOutputTokens: 1024,
  }
});

/**
 * Gera descri√ß√£o e texto alternativo para uma imagem usando Google Gemini AI
 * @param {Buffer} imageBuffer - Buffer da imagem
 * @param {string} customPrompt - Prompt personalizado (opcional)
 * @returns {Promise<{descricao: string, alt: string}>}
 */
export default async function gerarDescricaoComGemini(imageBuffer, customPrompt = null) {
  // Fallback caso a API n√£o esteja configurada
  if (!genAI || !model) {
    console.warn("Gemini AI n√£o configurado, usando descri√ß√£o padr√£o");
    return {
      descricao: "Uma imagem interessante foi compartilhada! üì∏",
      alt: "Imagem compartilhada pelo usu√°rio"
    };
  }

  const promptPadrao = `
Analise esta imagem e gere:

1. Uma descri√ß√£o natural e envolvente para redes sociais, como se fosse um post real
2. Um texto alternativo objetivo para acessibilidade

IMPORTANTE:
- A descri√ß√£o deve ser em portugu√™s brasileiro
- Seja criativo mas preciso
- Use emojis quando apropriado
- Mantenha tom positivo e engajador
- M√°ximo 200 caracteres para descri√ß√£o
- M√°ximo 100 caracteres para alt text

Retorne APENAS um JSON v√°lido no formato:
{
  "descricao": "sua descri√ß√£o aqui",
  "alt": "seu texto alternativo aqui"
}`;

  const prompt = customPrompt || promptPadrao;

  try {
    // Preparar imagem para a API
    const imagePart = {
      inlineData: {
        data: imageBuffer.toString("base64"),
        mimeType: "image/png", // Assumindo PNG, pode ser ajustado
      },
    };

    console.log("ü§ñ Enviando imagem para Gemini AI...");
    
    // Fazer a requisi√ß√£o para a API
    const result = await model.generateContent([prompt, imagePart]);
    const response = await result.response;
    const text = response.text();

    console.log("üìù Resposta bruta do Gemini:", text);

    // Limpar e processar resposta
    const cleanedText = text
      .replace(/```json/gi, '')
      .replace(/```/g, '')
      .replace(/^\s*[\r\n]/gm, '')
      .trim();

    // Tentar fazer parse do JSON
    let parsedResponse;
    try {
      parsedResponse = JSON.parse(cleanedText);
    } catch (parseError) {
      console.warn("Erro no parse JSON, tentando extrair manualmente:", parseError.message);
      
      // Fallback: tentar extrair com regex
      const descricaoMatch = cleanedText.match(/"descricao":\s*"([^"]+)"/);
      const altMatch = cleanedText.match(/"alt":\s*"([^"]+)"/);
      
      if (descricaoMatch && altMatch) {
        parsedResponse = {
          descricao: descricaoMatch[1],
          alt: altMatch[1]
        };
      } else {
        throw new Error("N√£o foi poss√≠vel extrair descri√ß√£o e alt text");
      }
    }

    // Validar e sanitizar resposta
    const descricao = parsedResponse.descricao 
      ? parsedResponse.descricao.substring(0, 200).trim()
      : "Uma imagem interessante foi compartilhada! üì∏";
    
    const alt = parsedResponse.alt 
      ? parsedResponse.alt.substring(0, 100).trim()
      : "Imagem compartilhada pelo usu√°rio";

    console.log("‚úÖ Descri√ß√£o gerada com sucesso!");
    
    return {
      descricao,
      alt
    };

  } catch (error) {
    console.error("‚ùå Erro ao comunicar com Gemini AI:", error.message);
    
    // Log detalhado para debug
    if (error.response) {
      console.error("Resposta da API:", error.response.data);
    }
    
    // Retornar descri√ß√£o padr√£o em caso de erro
    const fallbackDescricoes = [
      "Uma nova imagem foi compartilhada! ‚ú®",
      "Momento especial capturado em imagem üì∑",
      "Imagem interessante para compartilhar! üñºÔ∏è",
      "Nova foto adicionada √† galeria üéØ",
      "Compartilhando um momento √∫nico üì∏"
    ];
    
    const descricaoAleatoria = fallbackDescricoes[
      Math.floor(Math.random() * fallbackDescricoes.length)
    ];

    return {
      descricao: descricaoAleatoria,
      alt: "Imagem compartilhada pelo usu√°rio"
    };
  }
}

/**
 * Gera m√∫ltiplas varia√ß√µes de descri√ß√£o para uma imagem
 * @param {Buffer} imageBuffer - Buffer da imagem
 * @param {number} quantidade - N√∫mero de varia√ß√µes (padr√£o: 3)
 * @returns {Promise<Array<{descricao: string, alt: string}>>}
 */
export async function gerarVariacoesDescricao(imageBuffer, quantidade = 3) {
  if (!genAI || !model) {
    console.warn("Gemini AI n√£o configurado");
    return [];
  }

  const prompts = [
    "Descreva esta imagem de forma po√©tica e art√≠stica",
    "Descreva esta imagem de forma t√©cnica e objetiva", 
    "Descreva esta imagem de forma divertida e descontra√≠da"
  ];

  const variacoes = [];
  
  for (let i = 0; i < Math.min(quantidade, prompts.length); i++) {
    try {
      const resultado = await gerarDescricaoComGemini(imageBuffer, prompts[i]);
      variacoes.push(resultado);
    } catch (error) {
      console.error(`Erro na varia√ß√£o ${i + 1}:`, error.message);
    }
  }

  return variacoes;
}

/**
 * Analisa se uma imagem pode conter conte√∫do inadequado
 * @param {Buffer} imageBuffer - Buffer da imagem
 * @returns {Promise<{seguro: boolean, motivo?: string}>}
 */
export async function analisarSegurancaImagem(imageBuffer) {
  if (!genAI || !model) {
    return { seguro: true, motivo: "An√°lise n√£o dispon√≠vel" };
  }

  const promptSeguranca = `
Analise se esta imagem cont√©m:
- Conte√∫do sexual expl√≠cito
- Viol√™ncia gr√°fica
- Discurso de √≥dio visual
- Conte√∫do inadequado para menores

Responda APENAS com JSON:
{
  "seguro": true/false,
  "motivo": "explica√ß√£o se n√£o for seguro"
}`;

  try {
    const imagePart = {
      inlineData: {
        data: imageBuffer.toString("base64"),
        mimeType: "image/png",
      },
    };

    const result = await model.generateContent([promptSeguranca, imagePart]);
    const response = await result.response;
    const text = response.text();

    const cleanedText = text.replace(/```json/gi, '').replace(/```/g, '').trim();
    const analise = JSON.parse(cleanedText);

    return {
      seguro: analise.seguro !== false, // Padr√£o seguro se n√£o especificado
      motivo: analise.motivo || null
    };

  } catch (error) {
    console.error("Erro na an√°lise de seguran√ßa:", error.message);
    return { seguro: true, motivo: "Erro na an√°lise" };
  }
}
